{"version":3,"sources":["components/Login/Login.jsx"],"names":["SignupSchema","Yup","shape","email","required","password","min","max","LoginForm","login","initialValues","rememberMe","validationSchema","onSubmit","values","setSubmitting","setTimeout","isSubmitting","type","name","disabled","connect","state","isAuth","auth","loginSuccess","error","to"],"mappings":"0GAAA,gEAQMA,EAAeC,MAAaC,MAAM,CACpCC,MAAOF,MACFE,MAAM,iBACNC,SAAS,YACdC,SAAUJ,MACLK,IAAI,EAAG,cACPC,IAAI,GAAI,aACRH,SAAS,cAIZI,EAAY,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAChB,OACI,8BACI,cAAC,IAAD,CACIC,cAAe,CAAEP,MAAO,GAAIE,SAAU,GAAIM,YAAY,GACtDC,iBAAkBZ,EAElBa,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBC,YAAW,WACPP,EAAMK,EAAOX,MAAOW,EAAOT,SAAUS,EAAOH,YAC5CI,GAAc,KACf,MARX,SAWK,gBAAGE,EAAH,EAAGA,aAAH,OACG,eAAC,IAAD,WACI,gCACI,wCACA,cAAC,IAAD,CAAOC,KAAK,QAAQC,KAAK,UACzB,cAAC,IAAD,CAAcA,KAAK,aAEvB,gCACI,2CACA,cAAC,IAAD,CAAOD,KAAK,WAAWC,KAAK,aAC5B,cAAC,IAAD,CAAcA,KAAK,gBAEvB,gCACI,cAAC,IAAD,CAAOD,KAAK,WAAWC,KAAK,eADhC,iBAGA,8BACI,wBAAQD,KAAK,SAASE,SAAUH,EAAhC,+BA4BbI,uBANS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OACnBE,aAAcH,EAAME,KAAKC,aACzBC,MAAOJ,EAAME,KAAKE,SAGkB,CAACjB,WAA1BY,EAhBD,SAAC,GAA2C,IAA1CE,EAAyC,EAAzCA,OAAQE,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,MAAOjB,EAAY,EAAZA,MACzC,OAAIc,EACO,cAAC,IAAD,CAAUI,GAAI,aAElB,gCACH,uCACCF,EAAe,GAAK,+BAAOC,IAC5B,cAAClB,EAAD,CAAWC,MAAOA","file":"static/js/8.279c8ba8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {login} from \"../../Redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Required'),\r\n    password: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required')\r\n});\r\n\r\n\r\nconst LoginForm = ({login}) => {\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ email: '', password: '', rememberMe: false }}\r\n                validationSchema={SignupSchema}\r\n\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setTimeout(() => {\r\n                        login(values.email, values.password, values.rememberMe);\r\n                        setSubmitting(false);\r\n                    }, 400);\r\n                }}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <div>\r\n                            <div>Login</div>\r\n                            <Field type=\"email\" name=\"email\" />\r\n                            <ErrorMessage name=\"email\" />\r\n                        </div>\r\n                        <div>\r\n                            <div>Password</div>\r\n                            <Field type=\"password\" name=\"password\" />\r\n                            <ErrorMessage name=\"password\"  />\r\n                        </div>\r\n                        <div>\r\n                            <Field type=\"checkbox\" name=\"rememberMe\"/>remember me\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                Submit\r\n                            </button>\r\n                        </div>\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Login = ({isAuth, loginSuccess, error, login }) => {\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        {loginSuccess ? \"\" : <span>{error}</span>}\r\n        <LoginForm login={login}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    loginSuccess: state.auth.loginSuccess,\r\n    error: state.auth.error\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}
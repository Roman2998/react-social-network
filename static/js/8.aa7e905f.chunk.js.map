{"version":3,"sources":["components/Login/LoginForm.module.css","components/common/FormsControls/FormsControls.jsx","components/Login/LoginForm.jsx","components/Login/Login.jsx"],"names":["module","exports","MyTextField","name","props","useField","field","meta","configTextField","variant","touched","error","helperText","TextField","SignupSchema","Yup","shape","email","required","password","min","max","LoginForm","login","loginSuccess","captchaUrl","initialValues","rememberMe","validationSchema","onSubmit","values","actions","setTimeout","captcha","setSubmitting","Grid","className","s","grid","item","xs","label","type","Checkbox","src","Button","connect","state","auth","isAuth","to"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,KAAO,0B,0KCGZC,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAASC,EAAW,iBAChD,EAAsBC,YAASF,GAA/B,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAAe,uCACjBF,GACAF,GAFiB,IAGpBK,QAAS,aAMV,OAJIF,GAAQA,EAAKG,SAAWH,EAAKI,QAChCH,EAAgBG,OAAQ,EACxBH,EAAgBI,WAAaL,EAAKI,OAGlC,cAACE,EAAA,EAAD,eAAeL,K,kBCTXM,EAAeC,MAAaC,MAAM,CACvCC,MAAOF,MACLE,MAAM,uBACNC,SAAS,qBACXC,SAAUJ,MACRK,IAAI,EAAG,qDACPC,IAAI,GAAI,sDACRH,SAAS,0BAoDGI,EAjDG,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,aAAcb,EAAwB,EAAxBA,MAAOc,EAAiB,EAAjBA,WAC/C,OACC,8BACC,cAAC,IAAD,CACCC,cAAe,CACdT,MAAO,GACPE,SAAU,GACVQ,YAAY,GAEbC,iBAAkBd,EAClBe,SAAU,SAACC,EAAQC,GAClBC,YAAW,WACVT,EAAMO,EAAOb,MAAOa,EAAOX,SAAUW,EAAOH,WAAYG,EAAOG,SAC/DF,EAAQG,eAAc,KACpB,MAXL,SAcE,kBACA,cAAC,IAAD,UACC,eAACC,EAAA,EAAD,CAAMC,UAAWC,IAAEC,KAAnB,UACC,uCACCd,EAAe,GAAK,4BAAIb,IAGzB,cAACwB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACC,cAAC,EAAD,CAAarC,KAAK,QAAQsC,MAAM,YAEjC,cAACN,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACC,cAAC,EAAD,CAAarC,KAAK,WAAWuC,KAAK,WAAWD,MAAM,eAEpD,eAACN,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,UACC,cAACG,EAAA,EAAD,CAAUxC,KAAK,aAAauC,KAAK,aADlC,gBAGA,cAACP,EAAA,EAAD,CAAMI,MAAI,EAAV,SACEd,GAAc,qBAAKmB,IAAKnB,MAE1B,cAACU,EAAA,EAAD,CAAMI,MAAI,EAAV,SACEd,GAAc,cAAC,EAAD,CAAatB,KAAK,cAElC,cAACgC,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACC,cAACK,EAAA,EAAD,CAAQH,KAAK,SAASjC,QAAQ,YAA9B,iC,4CCpCOqC,uBAPS,SAACC,GAAD,MAAY,CAChCtB,WAAWsB,EAAMC,KAAKvB,WACtBwB,OAAQF,EAAMC,KAAKC,OACnBzB,aAAcuB,EAAMC,KAAKxB,aACzBb,MAAOoC,EAAMC,KAAKrC,SAGkB,CAACY,WAA1BuB,EAdD,SAAC,GAAoD,IAAnDG,EAAkD,EAAlDA,OAAQzB,EAA0C,EAA1CA,aAAcb,EAA4B,EAA5BA,MAAOY,EAAqB,EAArBA,MAAUnB,EAAW,iBAC9D,OAAI6C,EACO,cAAC,IAAD,CAAUC,GAAI,aAElB,cAAC,EAAD,CAAW3B,MAAOA,EAAOC,aAAcA,EAC5Bb,MAAOA,EAAOc,WAAYrB,EAAMqB","file":"static/js/8.aa7e905f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"LoginForm_grid__3PCIH\"};","import React from \"react\";\r\nimport {useField} from \"formik\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\nexport const MyTextField = ({name, ...props}) => {\r\n\tconst [field, meta] = useField(name);\r\n\tconst configTextField = {\r\n\t\t...field,\r\n\t\t...props,\r\n\t\tvariant: 'outlined'\r\n\t};\r\n\tif (meta && meta.touched && meta.error) {\r\n\t\tconfigTextField.error = true;\r\n\t\tconfigTextField.helperText = meta.error;\r\n\t}\r\n\treturn (\r\n\t\t<TextField {...configTextField} />\r\n\t);\r\n};","import React from 'react';\r\nimport {Form, Formik} from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport {Button, Checkbox, Grid} from \"@mui/material\";\r\nimport {MyTextField} from \"../common/FormsControls/FormsControls\";\r\nimport s from \"./LoginForm.module.css\"\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n\temail: Yup.string()\r\n\t\t.email('Enter a valid email')\r\n\t\t.required('Email is required'),\r\n\tpassword: Yup.string()\r\n\t\t.min(2, 'Password should be of minimum 2 characters length')\r\n\t\t.max(50, 'Password should be of maximum 50 characters length')\r\n\t\t.required('Password is required'),\r\n});\r\n\r\nconst LoginForm = ({login, loginSuccess, error, captchaUrl }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{\r\n\t\t\t\t\temail: '',\r\n\t\t\t\t\tpassword: '',\r\n\t\t\t\t\trememberMe: false,\r\n\t\t\t\t}}\r\n\t\t\t\tvalidationSchema={SignupSchema}\r\n\t\t\t\tonSubmit={(values, actions) => {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tlogin(values.email, values.password, values.rememberMe, values.captcha);\r\n\t\t\t\t\t\tactions.setSubmitting(false);\r\n\t\t\t\t\t}, 1000);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{() => (\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<Grid className={s.grid}>\r\n\t\t\t\t\t\t\t<h1>Login</h1>\r\n\t\t\t\t\t\t\t{loginSuccess ? \"\" : <a>{error}</a>}\r\n\r\n\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<MyTextField name=\"email\" label=\"Email\"/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<MyTextField name=\"password\" type=\"password\" label=\"Password\"/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<Checkbox name=\"rememberMe\" type=\"checkbox\"/>rememberMe\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t{captchaUrl && <img src={captchaUrl}/> }\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t{captchaUrl && <MyTextField name=\"captcha\"/>}\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<Button type=\"submit\" variant=\"contained\">Submit</Button>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)}\r\n\t\t\t</Formik>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default LoginForm;","import React from \"react\";\r\nimport {login} from \"../../Redux/Auth/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\n\r\nconst Login = ({isAuth, loginSuccess, error, login, ...props}) => {\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n    return <LoginForm login={login} loginSuccess={loginSuccess}\r\n                      error={error} captchaUrl={props.captchaUrl}/>\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl:state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n    loginSuccess: state.auth.loginSuccess,\r\n    error: state.auth.error\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}